{"version":3,"sources":["webpack:///component---src-pages-docs-services-and-controllers-js-b793ca893ca5a450abd4.js","webpack:///./src/pages/docs/services-and-controllers.js","webpack:///../examples/extracting-services-from-controllers/src/components/TodoList.after.tsx","webpack:///../examples/extracting-services-from-controllers/src/components/TodoList.before.tsx","webpack:///../examples/extracting-services-from-controllers/src/services/ListService.tsx"],"names":["webpackJsonp","311","module","exports","__webpack_require__","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","_react","React","_Section","_Headers","_CodeBlock","createElement","PageHeader","Section","title","href","CodeFile","path","649","650","651"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YAcA,SAASC,GAAwBC,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIE,KAAa,IAAW,MAAPF,EAAe,IAAK,GAAIG,KAAOH,GAAWI,OAAOC,UAAUC,eAAeC,KAAKP,EAAKG,KAAMD,EAAOC,GAAOH,EAAIG,GAAgC,OAAtBD,GAAOM,QAAUR,EAAYE,EAZlQL,EAAQI,YAAa,CCPtB,IAAAQ,GAAAX,EAAA,GAAYY,EDWCX,EAAwBU,GCVrCE,EAAAb,EAAA,IACAc,EAAAd,EAAA,IACAe,EAAAf,EAAA,GDkBCD,GAAQW,QChBM,WACb,MACEE,GAAAI,cAAA,WACEJ,EAAAI,cAAAF,EAAAG,WAAA,iCACAL,EAAAI,cAAAH,EAAAK,SAASC,MAAM,gBACbP,EAAAI,cAAA,0FAGAJ,EAAAI,cAAA,gUAGAJ,EAAAI,cAAA,sPAGAJ,EAAAI,cAAA,sVAGAJ,EAAAI,cAAA,uHAC6GJ,EAAAI,cAAA,qBAD7G,8NAIFJ,EAAAI,cAAAH,EAAAK,SAASC,MAAM,qCACbP,EAAAI,cAAA,2HACmHJ,EAAAI,cAAA,4BADnH,uBACgKJ,EAAAI,cAAA,wBADhK,yDAC2OJ,EAAAI,cAAA,4BAD3O,4FAC6VJ,EAAAI,cAAA,KAAGI,KAAM,qIAAT,6BAD7V,KAGAR,EAAAI,cAAAD,EAAAM,UAAUC,KAAK,sCACZtB,EAAQ,MAEXY,EAAAI,cAAA,mVAGAJ,EAAAI,cAAA,oHAC0GJ,EAAAI,cAAA,wBAD1G,gDAC4KJ,EAAAI,cAAA,4BAD5K,KAGAJ,EAAAI,cAAA,yGAC+FJ,EAAAI,cAAA,wBAD/F,KAGAJ,EAAAI,cAAAD,EAAAM,UAAUC,KAAK,gCACZtB,EAAQ,MAEXY,EAAAI,cAAA,sDAC4CJ,EAAAI,cAAA,2BAD5C,qGACsKJ,EAAAI,cAAA,2BADtK,wHAGAJ,EAAAI,cAAAD,EAAAM,UAAUC,KAAK,qCACZtB,EAAQ,MAEXY,EAAAI,cAAA,0HACgHJ,EAAAI,cAAA,2BADhH,wEAC6MJ,EAAAI,cAAA,wBAD7M,yFDoIPlB,EAAOC,QAAUA,EAAiB,SAI7BwB,IACA,SAAUzB,EAAQC,GE5LxBD,EAAAC,QAAA,gjBFkMMyB,IACA,SAAU1B,EAAQC,GGnMxBD,EAAAC,QAAA,89BHyMM0B,IACA,SAAU3B,EAAQC,GI1MxBD,EAAAC,QAAA","file":"component---src-pages-docs-services-and-controllers-js-b793ca893ca5a450abd4.js","sourcesContent":["webpackJsonp([122400793280316],{\n\n/***/ 311:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(1);\n\t\n\tvar React = _interopRequireWildcard(_react);\n\t\n\tvar _Section = __webpack_require__(34);\n\t\n\tvar _Headers = __webpack_require__(24);\n\t\n\tvar _CodeBlock = __webpack_require__(38);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\texports.default = function () {\n\t  return React.createElement(\n\t    'div',\n\t    null,\n\t    React.createElement(\n\t      _Headers.PageHeader,\n\t      null,\n\t      'Services and Controllers'\n\t    ),\n\t    React.createElement(\n\t      _Section.Section,\n\t      { title: 'Introduction' },\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'In React, we are used to thinking about applications as a tree of components.'\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'We tend to think of two types of components. \\'Controller\\' components are responsible for fetching data, holding state, connecting to global state, firing off side effects, long-running operations and navigation. \\'View\\' components are largely stateless, with their props passed in by their parent controller.'\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'This is nice as it keeps our view components nice and simple and makes them easy to reuse and test. Unfortunately, writing clean, testable controllers is much more difficult. Keeping controller code modular and reusable is also hard.'\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'In other frameworks, we might extract a concern out of a large class into separate utility classes. This is difficult in React because of the way that state is required to be owned by a component. These concerns might also need to respond to component lifecycle events or interact with API clients that live in the React context.'\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'Bright-js-framework makes it very easy to extract logic out of controllers by introducing the concept of a ',\n\t        React.createElement(\n\t          'em',\n\t          null,\n\t          'Service'\n\t        ),\n\t        '. Services are classes that have access to a subset of the React Component API. They are owned by a parent component, and receive lifecycle events. We\\'ll look at an example of how they can be used in the next section.'\n\t      )\n\t    ),\n\t    React.createElement(\n\t      _Section.Section,\n\t      { title: 'Extracting logic from Controllers' },\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'Let\\'s imagine a simple todo list component. In this example, we\\'ve split the presentational logic out into the ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          'TodoListView'\n\t        ),\n\t        ' component, leaving ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          'TodoList'\n\t        ),\n\t        ' to manage the state it presents.  We\\'ve excluded the ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          'TodoListView'\n\t        ),\n\t        ' source code for brevity (there\\'s nothing special about it), but it can be viewed in the ',\n\t        React.createElement(\n\t          'a',\n\t          { href: 'https://github.com/brightinteractive/bright-js-framework/tree/master/examples/extracting-services-from-controllers/src/components' },\n\t          'examples folder on Github'\n\t        ),\n\t        '.'\n\t      ),\n\t      React.createElement(\n\t        _CodeBlock.CodeFile,\n\t        { path: 'src/components/TodoList.before.tsx' },\n\t        __webpack_require__(650)\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'At the moment, it isn\\'t a huge component, but we can imagine that as requirements evolve (for example, if we start adding persistence, search and other features) it might become unwieldy. We might want to use the same update logic in different view contexts, without having to duplicate this logic amongst multiple components.'\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'In this example, we will split the list state management concern out into a separate class, leaving the ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          'TodoList'\n\t        ),\n\t        ' as a simple component that wires this up to ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          'TodoListView'\n\t        ),\n\t        '.'\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'First, we create a new Service class that contains the state management logic extracted from ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          'TodoList'\n\t        ),\n\t        ':'\n\t      ),\n\t      React.createElement(\n\t        _CodeBlock.CodeFile,\n\t        { path: 'src/services/ListService.tsx' },\n\t        __webpack_require__(651)\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'Next, we annotate the controller with the ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          '@controller'\n\t        ),\n\t        ' decorator and replace the state management logic with an instance of our new service. Adding the ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          '@controller'\n\t        ),\n\t        ' decorator is important, as otherwise the service won\\u2019t be connected to the controller\\u2019s state and lifecycle events.'\n\t      ),\n\t      React.createElement(\n\t        _CodeBlock.CodeFile,\n\t        { path: 'src/components/TodoList.after.tsx' },\n\t        __webpack_require__(649)\n\t      ),\n\t      React.createElement(\n\t        'p',\n\t        null,\n\t        'The behaviour of this component is identical to the original one, but its implementation is much simpler. Our ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          'ListService'\n\t        ),\n\t        ' class is now able to store state, which acts as if it were state of ',\n\t        React.createElement(\n\t          'code',\n\t          null,\n\t          'TodoList'\n\t        ),\n\t        '. Controllers are re-rendered whenever the state of a constituent service changes.'\n\t      )\n\t    )\n\t  );\n\t};\n\t\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 649:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"import * as React from 'react'\\nimport { controller, service } from '@brightinteractive/bright-js-framework'\\nimport { TodoListView } from './TodoListView'\\nimport { ListService } from '../services/ListService'\\n\\n@controller()\\nexport class TodoList extends React.PureComponent {\\n  @service(ListService)\\n  list: ListService\\n\\n  render() {\\n    return (\\n      <TodoListView\\n        items={this.list.items}\\n        onAdd={this.list.handleAdd}\\n        onEdit={this.list.handleEdit}\\n        onDelete={this.list.handleDelete}\\n      />\\n    )\\n  }\\n}\\n\"\n\n/***/ }),\n\n/***/ 650:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"import * as React from 'react'\\nimport { TodoListView } from './TodoListView'\\n\\nexport interface TodoListProps {\\n\\n}\\n\\nexport interface TodoListState {\\n  items: string[]\\n}\\n\\nexport class TodoList extends React.PureComponent<TodoListProps, TodoListState> {\\n  state: TodoListState = { items: [] }\\n\\n  handleAdd = (item: string) => {\\n    this.setState({\\n      items: [...this.state.items, item ]\\n    })\\n  }\\n\\n  handleDelete = (index: number) => {\\n    const next = this.state.items.slice()\\n    next.splice(index, 1)\\n\\n    this.setState({\\n      items: next\\n    })\\n  }\\n\\n  handleEdit = (index: number, value: string) => {\\n    const next = this.state.items.slice()\\n    next[index] = value\\n\\n    this.setState({\\n      items: this.state.items\\n    })\\n  }\\n\\n  render() {\\n    return (\\n      <TodoListView\\n        items={this.state.items}\\n        onAdd={this.handleAdd}\\n        onEdit={this.handleEdit}\\n        onDelete={this.handleDelete}\\n      />\\n    )\\n  }\\n}\\n\"\n\n/***/ }),\n\n/***/ 651:\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"import { Service } from '@brightinteractive/bright-js-framework'\\n\\nexport interface ListServiceState {\\n  items: string[]\\n}\\n\\nexport class ListService extends Service<ListServiceState> {\\n  state: ListServiceState = { items: [] }\\n\\n  get items() {\\n    return this.state.items\\n  }\\n\\n  handleAdd = (item: string) => {\\n    this.setState({\\n      items: [...this.state.items, item ]\\n    })\\n  }\\n\\n  handleDelete = (index: number) => {\\n    const next = this.state.items.slice()\\n    next.splice(index, 1)\\n\\n    this.setState({\\n      items: next\\n    })\\n  }\\n\\n  handleEdit = (index: number, value: string) => {\\n    const next = this.state.items.slice()\\n    next[index] = value\\n\\n    this.setState({\\n      items: this.state.items\\n    })\\n  }\\n}\\n\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-docs-services-and-controllers-js-b793ca893ca5a450abd4.js","import * as React from 'react'\nimport { Section } from '../../components/Section'\nimport { PageHeader, Subheader } from '../../components/Headers'\nimport { CodeBlock, CodeFile } from '../../components/CodeBlock'\n\nexport default () => {\n  return (\n    <div>\n      <PageHeader>Services and Controllers</PageHeader>\n      <Section title=\"Introduction\">\n        <p>\n          In React, we are used to thinking about applications as a tree of components.\n        </p>\n        <p>\n          We tend to think of two types of components. 'Controller' components are responsible for fetching data, holding state, connecting to global state, firing off side effects, long-running operations and navigation. 'View' components are largely stateless, with their props passed in by their parent controller.\n        </p>\n        <p>\n          This is nice as it keeps our view components nice and simple and makes them easy to reuse and test. Unfortunately, writing clean, testable controllers is much more difficult. Keeping controller code modular and reusable is also hard.\n        </p>\n        <p>\n          In other frameworks, we might extract a concern out of a large class into separate utility classes. This is difficult in React because of the way that state is required to be owned by a component. These concerns might also need to respond to component lifecycle events or interact with API clients that live in the React context.\n        </p>\n        <p>\n          Bright-js-framework makes it very easy to extract logic out of controllers by introducing the concept of a <em>Service</em>. Services are classes that have access to a subset of the React Component API. They are owned by a parent component, and receive lifecycle events. We'll look at an example of how they can be used in the next section.\n        </p>\n      </Section>\n      <Section title=\"Extracting logic from Controllers\">\n        <p>\n            Let's imagine a simple todo list component. In this example, we've split the presentational logic out into the <code>TodoListView</code> component, leaving <code>TodoList</code> to manage the state it presents.  We've excluded the <code>TodoListView</code> source code for brevity (there's nothing special about it), but it can be viewed in the <a href =\"https://github.com/brightinteractive/bright-js-framework/tree/master/examples/extracting-services-from-controllers/src/components\">examples folder on Github</a>.\n        </p>\n        <CodeFile path=\"src/components/TodoList.before.tsx\">\n          {require('raw!../../../../examples/extracting-services-from-controllers/src/components/TodoList.before.tsx')}\n        </CodeFile>\n        <p>\n          At the moment, it isn't a huge component, but we can imagine that as requirements evolve (for example, if we start adding persistence, search and other features) it might become unwieldy. We might want to use the same update logic in different view contexts, without having to duplicate this logic amongst multiple components.\n        </p>\n        <p>\n          In this example, we will split the list state management concern out into a separate class, leaving the <code>TodoList</code> as a simple component that wires this up to <code>TodoListView</code>.\n        </p>\n        <p>\n          First, we create a new Service class that contains the state management logic extracted from <code>TodoList</code>:\n        </p>\n        <CodeFile path=\"src/services/ListService.tsx\">\n          {require('raw!../../../../examples/extracting-services-from-controllers/src/services/ListService.tsx')}\n        </CodeFile>\n        <p>\n          Next, we annotate the controller with the <code>@controller</code> decorator and replace the state management logic with an instance of our new service. Adding the <code>@controller</code> decorator is important, as otherwise the service won’t be connected to the controller’s state and lifecycle events.\n        </p>\n        <CodeFile path=\"src/components/TodoList.after.tsx\">\n          {require('raw!../../../../examples/extracting-services-from-controllers/src/components/TodoList.after.tsx')}\n        </CodeFile>\n        <p>\n          The behaviour of this component is identical to the original one, but its implementation is much simpler. Our <code>ListService</code> class is now able to store state, which acts as if it were state of <code>TodoList</code>. Controllers are re-rendered whenever the state of a constituent service changes.\n        </p>\n      </Section>\n    </div>\n  )\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/docs/services-and-controllers.js","module.exports = \"import * as React from 'react'\\nimport { controller, service } from '@brightinteractive/bright-js-framework'\\nimport { TodoListView } from './TodoListView'\\nimport { ListService } from '../services/ListService'\\n\\n@controller()\\nexport class TodoList extends React.PureComponent {\\n  @service(ListService)\\n  list: ListService\\n\\n  render() {\\n    return (\\n      <TodoListView\\n        items={this.list.items}\\n        onAdd={this.list.handleAdd}\\n        onEdit={this.list.handleEdit}\\n        onDelete={this.list.handleDelete}\\n      />\\n    )\\n  }\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!../examples/extracting-services-from-controllers/src/components/TodoList.after.tsx\n// module id = 649\n// module chunks = 122400793280316","module.exports = \"import * as React from 'react'\\nimport { TodoListView } from './TodoListView'\\n\\nexport interface TodoListProps {\\n\\n}\\n\\nexport interface TodoListState {\\n  items: string[]\\n}\\n\\nexport class TodoList extends React.PureComponent<TodoListProps, TodoListState> {\\n  state: TodoListState = { items: [] }\\n\\n  handleAdd = (item: string) => {\\n    this.setState({\\n      items: [...this.state.items, item ]\\n    })\\n  }\\n\\n  handleDelete = (index: number) => {\\n    const next = this.state.items.slice()\\n    next.splice(index, 1)\\n\\n    this.setState({\\n      items: next\\n    })\\n  }\\n\\n  handleEdit = (index: number, value: string) => {\\n    const next = this.state.items.slice()\\n    next[index] = value\\n\\n    this.setState({\\n      items: this.state.items\\n    })\\n  }\\n\\n  render() {\\n    return (\\n      <TodoListView\\n        items={this.state.items}\\n        onAdd={this.handleAdd}\\n        onEdit={this.handleEdit}\\n        onDelete={this.handleDelete}\\n      />\\n    )\\n  }\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!../examples/extracting-services-from-controllers/src/components/TodoList.before.tsx\n// module id = 650\n// module chunks = 122400793280316","module.exports = \"import { Service } from '@brightinteractive/bright-js-framework'\\n\\nexport interface ListServiceState {\\n  items: string[]\\n}\\n\\nexport class ListService extends Service<ListServiceState> {\\n  state: ListServiceState = { items: [] }\\n\\n  get items() {\\n    return this.state.items\\n  }\\n\\n  handleAdd = (item: string) => {\\n    this.setState({\\n      items: [...this.state.items, item ]\\n    })\\n  }\\n\\n  handleDelete = (index: number) => {\\n    const next = this.state.items.slice()\\n    next.splice(index, 1)\\n\\n    this.setState({\\n      items: next\\n    })\\n  }\\n\\n  handleEdit = (index: number, value: string) => {\\n    const next = this.state.items.slice()\\n    next[index] = value\\n\\n    this.setState({\\n      items: this.state.items\\n    })\\n  }\\n}\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!../examples/extracting-services-from-controllers/src/services/ListService.tsx\n// module id = 651\n// module chunks = 122400793280316"],"sourceRoot":""}