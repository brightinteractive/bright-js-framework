webpackJsonp([25881880502388],{513:function(e,t){e.exports={pathContext:{docs:{id:871,name:'"test-utils"',kind:1,kindString:"External module",flags:{isExported:!0},originalName:"/home/travis/build/brightinteractive/bright-js-framework/src/test-utils.ts",children:[{id:890,name:"ServiceTestFixture",kind:256,kindString:"Interface",flags:{isExported:!0},comment:{shortText:"Utility class for providing the application context to a service, including lifecycle hooks and injecting all dependencies",text:"You can optionally provide an array of plugins, which should generally be stub implementations\nof interfaces used in your applications. These can be stubbed using the `stub()` method.\n",tags:[{tag:"class",text:"\n"}]},typeParameter:[{id:891,name:"ServiceType",kind:131072,kindString:"Type parameter",flags:{},type:{type:"reference",name:"Service",id:14}}],children:[{id:892,name:"service",kind:1024,kindString:"Property",flags:{isExported:!0},sources:[{fileName:"test-utils.ts",line:61,character:18}],type:{type:"typeParameter",name:"ServiceType",constraint:{type:"reference",name:"Service",id:14}}},{id:893,name:"getPlugin",kind:2048,kindString:"Method",flags:{isExported:!0},signatures:[{id:894,name:"getPlugin",kind:4096,kindString:"Call signature",flags:{},comment:{shortText:"Get a plugin of a specified type. If it exists, it will be returned.\nIf it does not exist, an exception is thrown."},typeParameter:[{id:895,name:"PluginType",kind:131072,kindString:"Type parameter",flags:{},type:{type:"reference",name:"PluginConfig",id:655}}],parameters:[{id:896,name:"constructor",kind:32768,kindString:"Parameter",flags:{},comment:{text:"Type of the plugins to search for.\n"},type:{type:"reference",name:"PluginConstructor",id:102,typeArguments:[{type:"typeParameter",name:"PluginType",constraint:{type:"reference",name:"PluginConfig",id:655}}]}}],type:{type:"typeParameter",name:"PluginType",constraint:{type:"reference",name:"PluginConfig",id:655}}}],sources:[{fileName:"test-utils.ts",line:69,character:11}]},{id:897,name:"unmount",kind:2048,kindString:"Method",flags:{isExported:!0},signatures:[{id:898,name:"unmount",kind:4096,kindString:"Call signature",flags:{},comment:{shortText:"Unmount the test case"},type:{type:"intrinsic",name:"void"}}],sources:[{fileName:"test-utils.ts",line:72,character:9}]}],groups:[{title:"Properties",kind:1024,children:[892]},{title:"Methods",kind:2048,children:[893,897]}],sources:[{fileName:"test-utils.ts",line:60,character:35},{fileName:"test-utils.ts",line:89,character:31}],defaultValue:" _ServiceTestFixture"},{id:909,name:"ServiceTestFixtureConstructor",kind:256,kindString:"Interface",flags:{isExported:!0},children:[{id:910,name:"createMountedService",kind:2048,kindString:"Method",flags:{isExported:!0},signatures:[{id:911,name:"createMountedService",kind:4096,kindString:"Call signature",flags:{},typeParameter:[{id:912,name:"ServiceType",kind:131072,kindString:"Type parameter",flags:{},type:{type:"reference",name:"Service",id:14}}],parameters:[{id:913,name:"props",kind:32768,kindString:"Parameter",flags:{},type:{type:"reference",name:"ServiceTestFixtureProps",id:899,typeArguments:[{type:"typeParameter",name:"ServiceType",constraint:{type:"reference",name:"Service",id:14}}]}}],type:{type:"reference",name:"Promise",typeArguments:[{type:"reference",name:"ServiceTestFixture",id:890,typeArguments:[{type:"typeParameter",name:"ServiceType",constraint:{type:"reference",name:"Service",id:14}}]}]}}],sources:[{fileName:"test-utils.ts",line:86,character:22}]}],groups:[{title:"Methods",kind:2048,children:[910]}],sources:[{fileName:"test-utils.ts",line:85,character:46}]},{id:899,name:"ServiceTestFixtureProps",kind:256,kindString:"Interface",flags:{isExported:!0},typeParameter:[{id:900,name:"ServiceType",kind:131072,kindString:"Type parameter",flags:{},type:{type:"reference",name:"Service",id:14}}],children:[{id:906,name:"host",kind:1024,kindString:"Property",flags:{isExported:!0,isOptional:!0},sources:[{fileName:"test-utils.ts",line:80,character:6}],type:{type:"union",types:[{type:"intrinsic",name:"undefined"},{type:"intrinsic",name:"string"}]}},{id:905,name:"hostname",kind:1024,kindString:"Property",flags:{isExported:!0,isOptional:!0},sources:[{fileName:"test-utils.ts",line:79,character:10}],type:{type:"union",types:[{type:"intrinsic",name:"undefined"},{type:"intrinsic",name:"string"}]}},{id:904,name:"location",kind:1024,kindString:"Property",flags:{isExported:!0,isOptional:!0},sources:[{fileName:"test-utils.ts",line:78,character:10}],type:{type:"union",types:[{type:"intrinsic",name:"undefined"},{type:"intrinsic",name:"string"}]}},{id:903,name:"plugins",kind:1024,kindString:"Property",flags:{isExported:!0,isOptional:!0},sources:[{fileName:"test-utils.ts",line:77,character:9}],type:{type:"array",elementType:{type:"reference",name:"PluginConstructor",id:102}}},{id:907,name:"port",kind:1024,kindString:"Property",flags:{isExported:!0,isOptional:!0},sources:[{fileName:"test-utils.ts",line:81,character:6}],type:{type:"union",types:[{type:"intrinsic",name:"undefined"},{type:"intrinsic",name:"number"}]}},{id:908,name:"protocol",kind:1024,kindString:"Property",flags:{isExported:!0,isOptional:!0},sources:[{fileName:"test-utils.ts",line:82,character:10}],type:{type:"union",types:[{type:"intrinsic",name:"undefined"},{type:"intrinsic",name:"string"}]}},{id:901,name:"service",kind:1024,kindString:"Property",flags:{isExported:!0},sources:[{fileName:"test-utils.ts",line:76,character:9}],type:{type:"reflection",declaration:{id:902,name:"__type",kind:65536,kindString:"Type literal",flags:{},sources:[{fileName:"test-utils.ts",line:76,character:10}]}}}],groups:[{title:"Properties",kind:1024,children:[906,905,904,903,907,908,901]}],sources:[{fileName:"test-utils.ts",line:75,character:40}]},{id:875,name:"TestFixture",kind:256,kindString:"Interface",flags:{isExported:!0},comment:{shortText:"Utility class for providing the application context to a react component and mounting\ntest components using enzyme.",text:"You can optionally provide an array of plugins, which should generally be stub implementations\nof interfaces used in your applications. These can be stubbed using the `stub()` method.\n",tags:[{tag:"class",text:"\n"}]},children:[{id:882,name:"getInstance",kind:2048,kindString:"Method",flags:{isExported:!0},signatures:[{id:883,name:"getInstance",kind:4096,kindString:"Call signature",flags:{},comment:{shortText:"Get the root object rendered by the component."},typeParameter:[{id:884,name:"T",kind:131072,kindString:"Type parameter",flags:{}}],type:{type:"typeParameter",name:"T"}}],sources:[{fileName:"test-utils.ts",line:38,character:13}]},{id:878,name:"getPlugin",kind:2048,kindString:"Method",flags:{isExported:!0},signatures:[{id:879,name:"getPlugin",kind:4096,kindString:"Call signature",flags:{},comment:{shortText:"Get a plugin of a specified type. If it exists, it will be returned.\nIf it does not exist, an exception is thrown."},typeParameter:[{id:880,name:"T",kind:131072,kindString:"Type parameter",flags:{},type:{type:"reference",name:"PluginConfig",id:655}}],parameters:[{id:881,name:"constructor",kind:32768,kindString:"Parameter",flags:{},comment:{text:"Type of the plugins to search for.\n"},type:{type:"reference",name:"PluginConstructor",id:102,typeArguments:[{type:"typeParameter",name:"T",constraint:{type:"reference",name:"PluginConfig",id:655}}]}}],type:{type:"typeParameter",name:"T",constraint:{type:"reference",name:"PluginConfig",id:655}}}],sources:[{fileName:"test-utils.ts",line:33,character:11}]},{id:876,name:"render",kind:2048,kindString:"Method",flags:{isExported:!0},signatures:[{id:877,name:"render",kind:4096,kindString:"Call signature",flags:{},comment:{shortText:"Render the test case into an Enzyme wrapper suitable for performing assertions against"},type:{type:"intrinsic",name:"any"}}],sources:[{fileName:"test-utils.ts",line:25,character:8}]},{id:888,name:"unmount",kind:2048,kindString:"Method",flags:{isExported:!0},signatures:[{id:889,name:"unmount",kind:4096,kindString:"Call signature",flags:{},comment:{shortText:"Unmount the test case"},type:{type:"intrinsic",name:"void"}}],sources:[{fileName:"test-utils.ts",line:47,character:9}]},{id:885,name:"waitForController",kind:2048,kindString:"Method",flags:{isExported:!0},signatures:[{id:886,name:"waitForController",kind:4096,kindString:"Call signature",flags:{},comment:{shortText:"Return a promise that resolves when a controller of a specific type has finished loading.\nUseful for waiting until an async action has completed before making a test assertion."},parameters:[{id:887,name:"type",kind:32768,kindString:"Parameter",flags:{},type:{type:"reference",name:"ComponentClass"}}],type:{type:"reference",name:"Promise",typeArguments:[{type:"intrinsic",name:"void"}]}}],sources:[{fileName:"test-utils.ts",line:44,character:19}]}],groups:[{title:"Methods",kind:2048,children:[882,878,876,888,885]}],sources:[{fileName:"test-utils.ts",line:23,character:28},{fileName:"test-utils.ts",line:50,character:24}],defaultValue:" _TestFixture"},{id:872,name:"TestFixtureProps",kind:256,kindString:"Interface",flags:{isExported:!0},children:[{id:874,name:"markup",kind:1024,kindString:"Property",flags:{isExported:!0},comment:{shortText:"Markup describing the component to render"},sources:[{fileName:"test-utils.ts",line:11,character:8}],type:{type:"reference",name:"ReactElement",typeArguments:[{type:"reference",name:"__type"}]}},{id:873,name:"plugins",kind:1024,kindString:"Property",flags:{isExported:!0,isOptional:!0},comment:{shortText:"Array of plugins to provide to the test context"},sources:[{fileName:"test-utils.ts",line:8,character:9}],type:{type:"array",elementType:{type:"reference",name:"PluginConstructor",id:102}}}],groups:[{title:"Properties",kind:1024,children:[874,873]}],sources:[{fileName:"test-utils.ts",line:6,character:33}]}],groups:[{title:"Interfaces",kind:256,children:[890,909,899,875,872]}],sources:[{fileName:"test-utils.ts",line:1,character:0}]}}}}});
//# sourceMappingURL=path---modules-test-utils-a711511e4afc23b1573f.js.map