webpackJsonp([77055595419222],{"./node_modules/hoist-non-react-statics/index.js":function(e,t){"use strict";var n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},r={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a=Object.defineProperty,o=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,l=Object.getPrototypeOf,c=l&&l(Object);e.exports=function e(t,d,u){if("string"!=typeof d){if(c){var p=l(d);p&&p!==c&&e(t,p,u)}var g=o(d);s&&(g=g.concat(s(d)));for(var h=0;h<g.length;++h){var m=g[h];if(!(n[m]||r[m]||u&&u[m])){var v=i(d,m);try{a(t,m,v)}catch(e){}}}return t}return t}},"./node_modules/raw-loader/index.js!./src/pages/docs/examples/plugins/example-config.ts":function(e,t){e.exports="import EventManagerPlugin from './plugins/EventManager'\n\nexport default [\n  EventManagerPlugin\n]\n"},"./node_modules/raw-loader/index.js!./src/pages/docs/examples/plugins/example-usage.tsx":function(e,t){e.exports="import * as React from 'react'\nimport { controller } from '@brightinteractive/bright-js-framework'\nimport { eventManager, EventManager } from '../plugins/EventManager'\nimport { Button } from './widgets'\n\n@controller()\nexport class ControlPanel extends React.PureComponent {\n  @eventManager\n  eventManager: EventManager\n\n  handleOpenClick = () => {\n    this.eventManager.emit('request-open-pod-bay-doors')\n  }\n\n  componentDidMount() {\n    this.eventManager.registerHandler('request-open-pod-bay-doors', () => {\n      console.error('I’m sorry but I can’t do that, Dave')\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Pod Bay doors:</h3>\n        <Button onClick={this.handleOpenClick}>Open</Button>\n      </div>\n    )\n  }\n}\n"},"./node_modules/raw-loader/index.js!./src/pages/docs/examples/plugins/writing.ts":function(e,t){e.exports="import {exported, inject, PluginConfig} from '@brightinteractive/bright-js-framework'\n\nconst EVENT_MANAGER = 'eventManager'\n\nexport const eventManager = inject(EVENT_MANAGER)\n\nexport default class EventManagerPlugin extends PluginConfig {\n  @exported(EVENT_MANAGER)\n  eventManager = new EventManager()\n}\n\nexport type EventHandler = (event: any) => void\n\nexport class EventManager {\n  private eventHandlers: Map<string, Set<EventHandler>> = new Map()\n\n  registerHandler(eventKey: string, eventHandler: EventHandler) {\n    const existingHandlers = this.eventHandlers.get(eventKey) || new Set()\n    this.eventHandlers.set(eventKey, existingHandlers.add(eventHandler))\n  }\n\n  emit(eventKey: string, event?: any) {\n    const handlers = this.eventHandlers.get(eventKey)\n    if (!handlers) {\n      return\n    }\n\n    handlers.forEach((eventHandler) => eventHandler(event))\n  }\n}\n"},'./node_modules/babel-loader/lib/index.js?{"plugins":["/home/travis/build/brightinteractive/bright-js-framework/docs-site/node_modules/gatsby/dist/utils/babel-plugin-extract-graphql.js","/home/travis/build/brightinteractive/bright-js-framework/docs-site/node_modules/babel-plugin-add-module-exports/lib/index.js","/home/travis/build/brightinteractive/bright-js-framework/docs-site/node_modules/babel-plugin-transform-object-assign/lib/index.js"],"presets":[["/home/travis/build/brightinteractive/bright-js-framework/docs-site/node_modules/babel-preset-env/lib/index.js",{"loose":true,"uglify":true,"modules":"commonjs","targets":{"browsers":["> 1%","last 2 versions","IE >= 9"]},"exclude":["transform-regenerator","transform-es2015-typeof-symbol"]}],"/home/travis/build/brightinteractive/bright-js-framework/docs-site/node_modules/babel-preset-stage-0/lib/index.js","/home/travis/build/brightinteractive/bright-js-framework/docs-site/node_modules/babel-preset-react/lib/index.js"],"cacheDirectory":true}!./src/pages/docs/extending-with-plugins.js':function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.__esModule=!0;var o=n("./node_modules/react/react.js"),s=a(o),i=n("./node_modules/gatsby-link/index.js"),l=r(i),c=n("./src/components/Section.js"),d=n("./src/components/Headers.js"),u=n("./src/components/CodeBlock.js");t.default=function(){return s.createElement("div",null,s.createElement(d.PageHeader,null,"Using Plugins"),s.createElement(c.Section,{title:"Introduction"},s.createElement("p",null,"Previously, we looked at ",s.createElement(l.default,{to:"/services-and-controllers"},"services"),", which allow behaviours to be extracted out of controller components and shared."),s.createElement("p",null,"Sometimes, we want to attach behavior to the ",s.createElement("em",null,"whole application"),". Plugins provide a way of doing this. Some uses of Plugins are:"),s.createElement("ul",null,s.createElement("li",null,"When integrating an authentication provider, we might need to retreive and validate an auth token when the application loads for the first time, before we decide what page to render."),s.createElement("li",null,"When integrating a data store such as Redux, we would need to keep a single store instance at the root of applications and allow our services and controllers access to the store."),s.createElement("li",null,"When writing a controller that interfaces with DOM APIs, we may want to use that controller in environments where the DOM does not exist. For example, a controller that reads or writes to cookies that we wish to use in a server-side-rendered application would need an abstract interface to access cookies, looking in the HTTP request in a server app, or a DOM API in the browser. It might also need a stub implementation when running in a test environment."),s.createElement("li",null,"When writing a GraphQL API for an application, we might want to add a GraphQL endpoint to our application server (assuming that we aren’t using an external GraphQL API).")),s.createElement("p",null,"Plugins provide a simple way of achieving these tasks.")),s.createElement(c.Section,{title:"Using Plugins"},s.createElement("p",null,"Plugins are configured in a special file at the root of your application's source, ",s.createElement("code",null,"src/config.ts"),". Let’s look at a hypothetical plugin called ",s.createElement("code",null,"EventManager")," that allows components to post and subscribe to events. We would install the plugin by adding it to the default export of our config file."),s.createElement(u.CodeFile,{path:"src/config.ts"},n("./node_modules/raw-loader/index.js!./src/pages/docs/examples/plugins/example-config.ts")),s.createElement("p",null,"Plugins that allow dependencies to be injected into components will typically provide a decorator to inject the dependency and an interface for the dependency. A controller that uses our hypothetical event managert to dispatch events would use it as follows:"),s.createElement(u.CodeFile,{path:"components/config.ts"},n("./node_modules/raw-loader/index.js!./src/pages/docs/examples/plugins/example-usage.tsx")),s.createElement("p",null,"Objects injected by plugins are shared between the whole application. This differes from services, which are unique to each controller.")),s.createElement(c.Section,{title:"Writing Plugins"},s.createElement("p",null,"Writing a plugin entails creating a plugin configuration to export the dependencies the plugin provides. This is done by extending the ",s.createElement("code",null,"PluginConfig")," class, and utilising the",s.createElement("code",null,"@exportDependency")," decorator."),s.createElement(u.CodeFile,{path:"./src/plugins/EventManager.ts"},n("./node_modules/raw-loader/index.js!./src/pages/docs/examples/plugins/writing.ts")),s.createElement("p",null,"In this code block we have created an extremely simple event manager plugin. The event manager itself is just an object; what's special here is the use of the ",s.createElement("code",null,"@exportDependency")," decorator to allow the ",s.createElement("code",null,"EventManager")," to be injected into controllers and services."),s.createElement("p",null,"The ",s.createElement("code",null,"@exportDependency")," decorator takes one parameter: a string key. This registers the value of the decorated property as an available dependency with the given key. Any controllers or services can request this dependency by providing the same key to the ",s.createElement("code",null,"@inject")," decorator."),s.createElement("p",null,"To abstract the details of the key away from the users of our plugin, we've exported a decorator named",s.createElement("code",null,"@eventManager"),". In this case, this is simply ",s.createElement("code",null,"@inject")," with a prefilled key. This does, however, give us (the plugin authors) the freedom to change how the clients of the plugin receive the EventManager. In the future, we may wish to do more than just a simple inject; we may also wish to utilise ",s.createElement("code",null,"@service")," capabilities, for example.")))},e.exports=t.default}});
//# sourceMappingURL=component---src-pages-docs-extending-with-plugins-js-0d6d27f25d9f7a11bcf2.js.map